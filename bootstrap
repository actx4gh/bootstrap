#!/usr/bin/env python
# TODO Break out into multiple modules
# TODO Support windows?
"""
Copyright (C) 2011 Stored IQ Inc, Graham Poulter
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import StringIO
from subprocess import Popen, PIPE, STDOUT
import subprocess
from urllib2 import urlopen
from urllib import urlencode
import sys
import os
import fcntl
from datetime import datetime
from ConfigParser import ConfigParser

# Common strings
BOOTSTRAP = 'bootstrap'
SCRIPT_NAME = sys.argv[0]
SCRIPT_VERSION = '0.1'
DESCRIPTION = 'provides a low-level, simple interface to CloudIQ which allows it to provision, update and test the server'
STATIC_CONFIG = '/etc/%s' % BOOTSTRAP
DYNAMIC_CONFIG = '/var/%s' % BOOTSTRAP
DEFAULT_CONFIG_FILE = '%s/bootstrap.ini' % STATIC_CONFIG
VERSION = 'version'
PRODUCT = 'product'
PRODUCTS = 'products'
REPOSITORY = 'repository'
SERVER = 'server'
KEY = 'key'
LASTMESSAGE = 'lastmessage'
MESSAGE = 'message'
VALUE = 'value'
REVISION = 'revision'
CALLBACK = 'callback'
MODE = 'mode'
NOSPAWN = 'nospawn'
TYPE = 'type'
SERVER_TYPE = '%s-%s' % (SERVER, TYPE)
BOOTSTRAP_VERSION = '%s-%s' % (BOOTSTRAP, VERSION)
SERVER_MODE = '%s-%s' % (SERVER, MODE)
GET = 'get'
SET = 'set'
LIST = 'list'
SCRIPT = 'script'
TEST = 'test'
UPGRADE = 'upgrade'
UPDATING = 'updating'
PROVISION = 'provision'
PROVISIONING = 'provisioning'
UNPROVISIONED = 'unprovisioned'
IDLE = 'idle'
PRODUCTION = 'production'
INVALID = 'invalid'
OPERATION = 'operation'
STATUS = 'status'
UPGRADING = 'upgrading'
VALID = 'valid'
ERROR = 'error'
INVALID = 'invalid'
INVALID_PRODUCT = '%s-%s' % (INVALID, PRODUCT)
INVALID_KEY = '%s-%s' % (INVALID, KEY)
INVALID_VERSION = '%s-%s' % (INVALID, VERSION)
INVALID_TEST = '%s-%s' % (INVALID, TEST)
INVALID_MODE = '%s-%s' % (INVALID, MODE)
INVALID_SCRIPT = '%s-%s' % (INVALID, SCRIPT)
INVALID_OPERATION = '%s-%s' % (INVALID, OPERATION)
SCRIPT_ERROR = '%s-%s' % (SCRIPT, ERROR)
REQARGS = 'required command line parameters'
OPTARGS = 'optional command line parameters'
HIDDENARGS = 'hidden command line parameters'
WRITABLE = 'writable'
STATIC = 'static'
DESC = 'description'
UPGRADE_SCRIPT = '%s-%s' % (UPGRADE, SCRIPT)
MODE_SCRIPT = '%s-%s' % (MODE, SCRIPT)
MODE_UPDATING = '%s-%s' % (MODE, UPDATING)
CMD_RUNNING = 'Another command is already running'
SUCCESS = 'success' 
FIELD_SEPARATOR = '|<>|'
HEARTBEAT = 'heartbeat'
# Subcommands and options for cli mode
SUBCMDS = {
        '%s.%s' % (PRODUCT, SET): {
            DESC: 'sets the specified configuration value for the specified product',
            REQARGS: (PRODUCT, KEY, VALUE)},
        '%s.%s' % (PRODUCT, GET): {
            DESC: 'reports the specified configuration value for the specified product',
            REQARGS: (PRODUCT, KEY)},
        '%s.%s' % (HEARTBEAT, GET): {
            DESC: 'gives the heartbeat of the server'},
        '%s.%s' % (PRODUCT, LIST): {
            DESC: 'lists the products present on this server along with their current versions (one per line)'},
        '%s.%s' % (PRODUCT, UPGRADE): {
            DESC: 'upgrades the specified product to the specified version',
            REQARGS: (PRODUCT, REVISION),
            HIDDENARGS: (NOSPAWN,),
            OPTARGS: (CALLBACK)},
        '%s.%s' % (SERVER, GET): {
            DESC: 'reports the specified server value',
            REQARGS: (KEY,)},
        '%s.%s' % (SERVER, MODE): {
            DESC: 'gets or sets the mode of this server',
            HIDDENARGS: (NOSPAWN,),
            OPTARGS: (MODE, CALLBACK)},
        '%s.%s' % (SERVER, PROVISION): {
            DESC: 'provisions this server',
            HIDDENARGS: (NOSPAWN,),
            OPTARGS: (CALLBACK,)},
        '%s.%s' % (SERVER, SET): {
            DESC: 'sets the specified server value',
            REQARGS: (KEY, VALUE)}}

OPTIONS = {
        PRODUCT: {
            DESC: 'product name'},
        KEY: {
            DESC: 'configuration key name'},
        VALUE: {
            DESC: 'configuration value'},
        CALLBACK: {
            DESC: 'a url which should be visited when the upgrade is complete'},
        NOSPAWN: {
            DESC: 'if true the bootstrap command runs the actual command instead of spawning itself'},
        MODE: {
            DESC: 'the bootstrap-compatible server mode'},
        REVISION: {
            DESC: 'product revision'}}

# Server modes
MODES = {
        UNPROVISIONED: {
            DESC:'The initial mode of a server; indicates no products have been provisioned on it.'},
        IDLE: {
            DESC: 'Only critical OS services should be running; all product services are inactive.'},
        PRODUCTION: {
            DESC: 'All product services are active.'},
        INVALID: {
            DESC: 'The server is in an invalid state that likely requires manual intervention.'},
        MODE_UPDATING: {
            DESC: 'The server mode is in the process of being updated'},
        PROVISIONING: {
            DESC: 'The server is in the process of a provision operation.'}}

ERROR_TAGS = (INVALID_KEY, INVALID_PRODUCT, INVALID_VERSION, INVALID_TEST, INVALID_MODE, INVALID_SCRIPT, INVALID_OPERATION, SCRIPT_ERROR)

# Server values
BOOTSTRAP_VERSION = '%s-%s' % (BOOTSTRAP, VERSION)
SERVER_MODE = '%s-%s' % (SERVER, MODE)
SERVER_TYPE = '%s-%s' % (SERVER, TYPE)
SERVER_VALUES = {BOOTSTRAP_VERSION: {STATIC: True }, SERVER_TYPE: {STATIC: True }, SERVER_MODE: {WRITABLE: True}, LASTMESSAGE: {}}

# Product values
PRODUCT_VALUES = {STATUS: {}, VERSION: {WRITABLE: True}, REPOSITORY: {WRITABLE: True}, UPGRADE_SCRIPT: {STATIC: True}, MODE_SCRIPT: {STATIC: True}, LASTMESSAGE: {}}

# Classes

class PidFile(object):
    """
    Context manager that locks a pid file.  Implemented as class
    not generator because daemon.py is calling .__exit__() with no parameters
    instead of the None, None, None specified by PEP-343.
    By Graham Poulter
    http://code.activestate.com/recipes/577911-context-manager-for-a-daemon-pid-file/
    """

    def __init__(self, path):
        self.path = path
        self.pidfile = None

    def enter(self):
        self.pidfile = open(self.path, "a+")
        try:
            fcntl.flock(self.pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            raise SystemExit("Already running according to " + self.path)
        self.pidfile.seek(0)
        self.pidfile.truncate()
        self.pidfile.write(str(os.getpid()))
        self.pidfile.flush()
        self.pidfile.seek(0)
        return self.pidfile

    def exit(self, exc_type=None, exc_value=None, exc_tb=None):
        try:
            self.pidfile.close()
        except IOError, err:
            # ok if file was just closed elsewhere
            if err.errno != 9:
                raise
        os.remove(self.path)

class BootStrapException(Exception):
    def __init__(self, tag, messages):
        if tag not in ERROR_TAGS:
            raise Exception, "Unknown error tag: %s\n" % tag
        self.tag = tag
        self.messages = messages
    def __str__(self):
        return repr(self.tag)

class BootStrap(object):
    """Bootstrap"""
    def __init__(self, static_config_file=DEFAULT_CONFIG_FILE, static_config_dict=None):
        """init"""
        self.static_config_file = static_config_file
        self.static_config_dict = static_config_dict
        self.static_config = ConfigParser()
        self.static_config.read(self.static_config_file)
        self.dynamic_config = self.__init_dynamic_config()
        self.server_values = SERVER_VALUES
        self.product_values = PRODUCT_VALUES
        self.__set_product_version_access()
        self.pidfile = None
        self.mode_key = '%s/%s' % (DYNAMIC_CONFIG, SERVER_MODE)

        # Verify all the helper scripts are present and executable
        for section in self.static_config.sections():
            product = product_name(section)
            if product:
                for script in UPGRADE_SCRIPT, MODE_SCRIPT:
                    if self.static_config.has_option(section, script):
                        filepath = self.static_config.get(section, script)
                        if not os.path.exists(filepath):
                            raise BootStrapException(INVALID_SCRIPT, '%s %s' % (product, filepath))
                        set_executable(filepath)

    def __lockon(self):
        """ Turn on lock for long running commands """
        if not self.pidfile:
            self.pidfile = PidFile('%s/%s.lock' % (DYNAMIC_CONFIG, BOOTSTRAP))
        self.pidfile.enter()

    def __lockoff(self):
        """ Turn off lock for long running commands """
        if not self.pidfile:
            raise(Exception, "bootstrap.__lockoff was called before a lock file exists")
        self.pidfile.exit()

    @property
    def __islocked(self):
        """ Return true if bootstrap lock file exists """
        return os.path.exists('%s/%s.lock' % (DYNAMIC_CONFIG, BOOTSTRAP))

    def __write_static(self):
        """ """
        fo = None
        try:
            fo = open(self.static_config_file, 'w')
            self.static_config.write(fo)
            fo.close()
        except Exception, error:
            if fo:
                fo.close()
            raise Exception, error

    def __init_dynamic_config(self):
        """Creates the initial structure for dynamic configuration"""
        if not os.path.exists(DYNAMIC_CONFIG):
            os.mkdir(DYNAMIC_CONFIG)
            os.mkdir('%s/%s' % (DYNAMIC_CONFIG, PRODUCTS))
            for section in self.static_config.sections():
                product = product_name(section)
                if product:
                    os.mkdir('%s/%s/%s' % (DYNAMIC_CONFIG, PRODUCTS, product))

        return self.__dynamic_config

    def __set_product_version_access(self):
        """ handle flipping version key to readonly based on the server mode"""
        dynamic_config = self.__dynamic_config
        product_values = self.product_values
        if dynamic_config[SERVER_MODE] != UNPROVISIONED:
            writable(product_values[VERSION], True)
        elif dynamic_config[SERVER_MODE] == UNPROVISIONED:
            writable(product_values[VERSION], False, True)

    @property
    def __dynamic_config(self):
        """Returns a dict representing the dyanmic config read from disk"""
        dynamic_config = {PRODUCTS: {}}
        dynamic_config[SERVER_MODE] = filestore('%s/%s' % (DYNAMIC_CONFIG, SERVER_MODE))
        dynamic_config[LASTMESSAGE] = filestore('%s/%s' % (DYNAMIC_CONFIG, LASTMESSAGE))
        if dynamic_config[SERVER_MODE] not in MODES:
            filestore('%s/%s' % (DYNAMIC_CONFIG, SERVER_MODE), UNPROVISIONED)
        for product in os.listdir('%s/%s' % (DYNAMIC_CONFIG, PRODUCTS)):
            product_path = '%s/%s/%s' % (DYNAMIC_CONFIG, PRODUCTS, product)
            product_repository = filestore('%s/%s' % (product_path, REPOSITORY))
            product_status = filestore('%s/%s' % (product_path, STATUS))
            product_version = filestore('%s/%s' % (product_path, VERSION))
            product_lastmessage = filestore('%s/%s' % (product_path, LASTMESSAGE))
            dynamic_config[PRODUCTS][product] = { VERSION: product_version,
                    REPOSITORY: product_repository,
                    STATUS: product_status,
                    LASTMESSAGE: product_lastmessage }
        return dynamic_config

    def server_get(self, key):
        """Returns a server key value"""
        if not self.static_config.has_option(BOOTSTRAP, key):
            raise BootStrapException(INVALID_KEY, key)
        return self.static_config.get(BOOTSTRAP, key).replace('\n', '')

    def server_set(self, key, value):
        """Sets a bootstrap server config value"""
        server_values = self.server_values
        if not self.static_config.has_option(BOOTSTRAP, key):
            raise BootStrapException(INVALID_KEY, key)
        if not server_values[key].has_key(WRITABLE):
            raise BootStrapException(INVALID_OPERATION, '%s is a readonly value' % key)
        self.static_config.set(BOOTSTRAP, key, value)
        self.__write_static()

    def server_provision(self, nospawn=False, callback=None):
        """ """
        dynamic_config = self.__dynamic_config
        if nospawn == NOSPAWN:
            if self.__islocked:
                if callback:
                    read_url(callback, server_callback_params(INVALID_OPERATION, CMD_RUNNING))
                raise BootStrapException(INVALID_OPERATION, CMD_RUNNING)
            filestore(self.mode_key, PROVISIONING)
            for product in dynamic_config[PRODUCTS].keys():
                product_version = dynamic_config[PRODUCTS][product][VERSION]
                try:
                    out = self.product_upgrade(product, product_version, NOSPAWN)
                except Exception, error:
                    if callback:
                        read_url(callback, server_callback_params(INVALID, str(error)))
                    filestore(self.mode_key, INVALID)
                    raise(error)
            filestore(self.mode_key, IDLE)
            if callback:
                read_url(callback, server_callback_params(IDLE))
            self.__set_product_version_access()
        else:
            # set the callback to use the param given for nospawn, since nospawn is hidden to the user
            if nospawn:
                callback = nospawn
            args = [sys.executable, sys.argv[0], '%s.%s' % (SERVER, PROVISION), NOSPAWN]
            if callback:
                args.append(callback)
            os.spawnv(os.P_NOWAIT, sys.executable, args)
            
    def server_mode(self, nospawn=False, mode=None, callback=None):
        """ """
        dynamic_config = self.__dynamic_config
        if nospawn == NOSPAWN:
            if not mode in MODES.keys():
                if callback:
                    read_url(callback, server_callback_params(INVALID_MODE, '%s is not a valid mode' % mode))
                self.__set_product_version_access()
                raise BootStrapException(INVALID_MODE, mode)
            if self.__islocked:
                if callback:
                    read_url(callback, server_callback_params(INVALID_OPERATION, CMD_RUNNING))
                raise BootStrapException(INVALID_OPERATION, CMD_RUNNING)
            self.__lockon()
            filestore(self.mode_key, MODE_UPDATING)
            errors = {}
            for section in self.static_config.sections():
                product = product_name(section)
                if product and self.static_config.has_option(section, MODE_SCRIPT):
                    mode_script = self.static_config.get(section, MODE_SCRIPT)
                    cmd = '%s %s' % (mode_script, mode)
                    proc = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
                    out, err = proc.communicate()
                    retcode = proc.poll()
                    if retcode:
                        errors[product] = (out, err, retcode)

            self.__lockoff()
            
            # Scan for errors and raise an exception
            if len(errors.keys()):
                messages = []
                for product in errors.keys():
                    error = ''
                    for part in errors[product]:
                        if part:
                            error = '%s %s' % (error, part)
                    if error != '':
                        messages.append(error)
                if callback:
                    read_url(callback, server_callback_params(SCRIPT_ERROR, messages))
                raise BootStrapException(SCRIPT_ERROR, messages)

            # Setting modes for each product worked, hit call back and update server mode_key
            if callback:
                read_url(callback, server_callback_params(mode, 'Server mode is now %s' % mode))
            filestore(self.mode_key, mode)

        else:
            if not nospawn:
                return dynamic_config[SERVER_MODE].replace('\n', '')
            callback = mode
            mode = nospawn
            args = [sys.executable, sys.argv[0], '%s.%s' % (SERVER, MODE), NOSPAWN, mode]
            if callback:
                args.append(callback)
            os.spawnv(os.P_NOWAIT, sys.executable, args)

    def product_get(self, product, key):
        """ """
        dynamic_config = self.__dynamic_config
        product_values = self.product_values
        section = product_section_name(product)
        if not product_values.has_key(key):
            raise BootStrapException(INVALID_KEY, key)
        if product_values[key].has_key(STATIC):
            if not self.static_config.has_section(section):
                raise BootStrapException(INVALID_PRODUCT, product)
            elif not self.static_config.has_option(section, key):
                raise BootStrapException(INVALID_KEY, key)
            return self.static_config.get(section, key).replace('\n', '')
        else:
            try:
                return dynamic_config[PRODUCTS][product][key]
            except KeyError:
                raise BootStrapException(INVALID_KEY, key)

    def product_set(self, product, key, value):
        """ """
        dynamic_config = self.__dynamic_config
        product_values = self.product_values
        section = product_section_name(product)
        if not self.static_config.has_section(section):
            raise BootStrapException(INVALID_PRODUCT, product)
        if not product_values[key].has_key(WRITABLE):
            raise BootStrapException(INVALID_OPERATION, '%s is a readonly value' % key)
        if product_values[key].has_key(STATIC):
            if not self.static_config.has_option(section, key):
                raise BootStrapException(INVALID_KEY, key)
            self.static_config.set(section, key, value)
        else:
            if not dynamic_config[PRODUCTS].has_key(product):
                os.mkdir('%s/%s/%s' % (DYNAMIC_CONFIG, PRODUCTS, product))
            filepath = '%s/%s/%s/%s' % (DYNAMIC_CONFIG, PRODUCTS, product, key)
            filestore(filepath, value)

    def product_list(self):
        """ """
        dynamic_config = self.__dynamic_config
        retval = ''
        if not len(dynamic_config[PRODUCTS].keys()):
            for section in self.static_config.sections():
                if section.startswith(PRODUCT):
                    retval += '%s\n' % section.split(':')[1].lstrip()
        else:
            for product in dynamic_config[PRODUCTS].keys():
                retval += "%s%s%s%s%s%s%s%s%s%s\n" % (product, FIELD_SEPARATOR, 
                    dynamic_config[PRODUCTS][product][VERSION], FIELD_SEPARATOR,
                    dynamic_config[PRODUCTS][product][REPOSITORY], FIELD_SEPARATOR,
                    dynamic_config[PRODUCTS][product][STATUS], FIELD_SEPARATOR,
                    dynamic_config[PRODUCTS][product][LASTMESSAGE], FIELD_SEPARATOR)
        retval = retval.rstrip('\n')
        return retval

    def hearbeat_checkup_appstack(self):
        try:
            cmd = '/siq/bin/invoke-monit  status haproxy'
            p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
            (stdoutdata, stderrdata) = p.communicate(input=None)
            if stderrdata is not None:
                return '0'
            else:
                string_buffer = StringIO.StringIO(stdoutdata)
                process = {}
                len_proces = len('Process')
                len_sys = len('System')
                len_status = len('status')
                service = None
                status = None
                for message in string_buffer:
                    message = message.lstrip()
                    if message.startswith('Process'):
                        service = message[len_proces:].strip()
                    elif message.startswith('System'):
                        service = message[len_sys:].strip()
                    elif message.startswith('status'):
                        status = message[len_status:].strip()
                    if service and status:
                        process[service] = status
                        service = None
                        status = None
                string_buffer.close()
                if len(process) == 0:
                    return '0'
                for proc, status in process.iteritems():
                    if status in ['Running']:
                        continue
                    else:
                        return '0'
                return '1'
        except Exception:
            return '0'

    def hearbeat_checkup_gateway(self):
        try:
            cmd = 'service deepfiler status'
            p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
            (stdoutdata, stderrdata) = p.communicate(input=None)
            if stderrdata is not None:
                return '0'
            else:
                string_buffer = StringIO.StringIO(stdoutdata)
                process = {}
                msg_list = []
                for message in string_buffer:
                    message = message.strip()
                    msg_list = message.split()
                    if len(msg_list) >= 3 and msg_list[0] in['Process', 'System']:
                        status = ' '.join(msg_list[2:])
                        process[msg_list[1]] = status
                string_buffer.close()
                if len(process) == 0:
                    return '0'
                else:
                    for proc, msg_list in process.iteritems():
                        if msg_list in ['running', 'not monitored']:
                            continue
                        else:
                            return '0'
                    return '1'
        except Exception:
            return '0'


    def heartbeat_get(self):
        try:
            os.stat('/DATYPE')
        except OSError:
            return self.hearbeat_checkup_appstack()
        return self.hearbeat_checkup_gateway()
	
    def product_test(self, product, test, callback=None):
        """ """

    def product_upgrade(self, product, version, nospawn=False, callback=None):
        """ """
        if nospawn == NOSPAWN:
            """ do actual work """
            dynamic_config = self.__dynamic_config
            section = product_section_name(product)
            product_path = '%s/%s/%s' % (DYNAMIC_CONFIG, PRODUCTS, product)
            upgrade_script = self.static_config.get(section, UPGRADE_SCRIPT)

            if self.__islocked:
                if callback:
                    filestore('%s/%s' % (product_path, LASTMESSAGE), '%s %s' % (str(datetime.now()), CMD_RUNNING))
                    callback_params = product_callback_params(product, version, INVALID_OPERATION, CMD_RUNNING)
                    read_url(callback, callback_params)
                raise BootStrapException(INVALID_OPERATION, CMD_RUNNING)
            self.__lockon()
            filestore('%s/%s' % (product_path, STATUS), UPGRADING)
            filestore('%s/%s' % (product_path, LASTMESSAGE), '%s upgrading to version %s' % (str(datetime.now()), version))
            repository = '%s/%s/%s/repository' % (DYNAMIC_CONFIG, PRODUCTS, product)
            mode = dynamic_config[SERVER_MODE]
            cmd = '%s %s %s %s' % (upgrade_script, repository, version, mode)
            proc = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
            out, err = proc.communicate()
            retcode = proc.poll()
            if out:
                out = out.splitlines()
            if err:
                err = err.splitlines()
            if not retcode:
                status = VALID
                message = '%s upgrading to version %s successful' % (str(datetime.now()), version)
                filestore('%s/%s' % (product_path, VERSION), version)
            else:
                status = INVALID
                if err:
                    message = '%s upgrading to version %s failed with "%s"' % (str(datetime.now()), version, str(err))
                else:
                    message = '%s upgrading to version %s failed' % (str(datetime.now()), version)
                filestore(self.mode_key, INVALID)
            filestore('%s/%s' % (product_path, STATUS), status)
            filestore('%s/%s' % (product_path, LASTMESSAGE), message)
            if callback:
                if status == VALID:
                    callback_params = product_callback_params(product, version, status)
                elif status == INVALID:
                    callback_params = product_callback_params(product, version, status, str(err))
                read_url(callback, callback_params)
            self.__lockoff()
            if status == INVALID:
                raise BootStrapException(SCRIPT_ERROR, message)
            return out, err
        else:
            # support hiding nospawn param from user, handle the callback correctly
            if nospawn:
                callback = nospawn
            args = [sys.executable, sys.argv[0], '%s.%s' % (PRODUCT, UPGRADE), product, version, NOSPAWN]
            if callback:
                args.append(callback)
            os.spawnv(os.P_NOWAIT, sys.executable, args)

# Utilities for bootstrap
def writable(d, disable=False, enable=False):
    ''' Handles returning True/False + setting/unsetting the writable key on values dicts'''
    if d.has_key(WRITABLE):
        if disable:
            del d[WRITABLE]
        else:
            return True
    elif enable:
        d[WRITABLE] = True

def set_executable(filepath):
    if not os.access(filepath, os.X_OK):
        os.chmod(filepath, 0755)

def product_callback_params(product, version, status, message=None):
    """ Return a callback url formatted for CloudIQ """
    params = { PRODUCT: product, VERSION: version, STATUS: status }
    if message:
        params[MESSAGE] = message
    return params

def server_callback_params(status, message=None):
    """ Return a callback url formatted for CloudIQ """ 
    params = { STATUS: status }
    if message:
        params[MESSAGE] = message
    return params

def read_url(url, params):
    """ """
    params = urlencode(params)
    f = urlopen(url+'?'+params)
    return (f.read(), f.code)

def product_section_name(product):
    """ """
    return '%s: %s' % (PRODUCT, product)

def product_name(section):
    """ return a product name given a section value """
    if section.startswith(PRODUCT):
        return section.split(':')[1].lstrip()

def filestore(filepath, value=None, delete_on_null=False):
    """ Handle using a plain text file to store/retrieve values """
    """ If no file exists an empty one is created """
    if not os.path.exists(filepath):
        open(filepath, 'w').close()
    fo = None
    retval = None
    try:
        if value:
            fo = open(filepath, 'w')
            fo.write(str(value))
        else:
            fo = open(filepath, 'r')
            retval = fo.read()
        fo.close()
    except Exception, error:
        if fo:
            fo.close()
        print 'Error: %s' % error
        raise Exception
    return retval

# Command line parsing
def print_bootstrap_help():
    """Print help for tool"""
    print '%s %s' % (SCRIPT_NAME, SCRIPT_VERSION)
    print DESCRIPTION
    print '\nUsage:'
    for key in SUBCMDS.keys():
        # need to find a better way to format the option text
        line = '  %s' % key
        if SUBCMDS[key].has_key(REQARGS):
            line = '%s %s' % (line, str(SUBCMDS[key][REQARGS]).replace(
                '(', '').replace(
                    ')', '').replace(
                        '\'', '').replace(',', ''))
        if SUBCMDS[key].has_key(OPTARGS):
            line = '%s %s' % (line, str(SUBCMDS[key][OPTARGS]).replace(
                '(', '[').replace(
                    ')', ']').replace(
                        '[\'', '[[').replace(
                            '\']', ']]').replace(
                                ' \'', '[').replace('\',', ']'))
        print '  %s\n%-20s %s' % (line, '', SUBCMDS[key][DESC])

def print_subcommand_args_help(subcommand, argtype=1):
    """Print help for subcommands"""
    cmdinfo = SUBCMDS[subcommand]
    if not argtype:
        print 'Error: %s subcommand requires no parameters' % subcommand
        return
    elif argtype == 1:
        print 'Error: %s subcommand requires %d parameter[s]' % (
                subcommand, len(cmdinfo[REQARGS]))
        print 'Required parameters:'
        for opt in cmdinfo[REQARGS]:
            print '  %-23s %s' % (opt, OPTIONS[opt][DESC])
    elif argtype == 2:
        print 'Error: %s subcommand can have %d optional parameter[s]' % (
                subcommand, len(cmdinfo[OPTARGS]))
        print 'Optional parameters:'
        for opt in cmdinfo[OPTARGS]:
            print '  %-23s %s' % (opt, OPTIONS[opt][DESC])

def cliparse():
    """Validate cli"""

    # Validate subcommand
    if (len(sys.argv[1:]) < 1 or sys.argv[1] not in SUBCMDS.keys()):
        print_bootstrap_help()
        sys.exit(1)

    # Check required params
    subcommand = sys.argv[1]
    cmdinfo = SUBCMDS[subcommand]
    optcount = len(sys.argv[2:])
    if cmdinfo.has_key(REQARGS):
        if optcount < len(cmdinfo[REQARGS]):
            print_subcommand_args_help(subcommand)
            sys.exit(1)
    elif optcount and not cmdinfo.has_key(REQARGS) and not cmdinfo.has_key(OPTARGS) and not cmdinfo.has_key(HIDDENARGS):
        print_subcommand_args_help(subcommand, 0)
        sys.exit(1)

    # Check optional params
    if cmdinfo.has_key(OPTARGS):
        if cmdinfo.has_key(REQARGS):
            pad = len(cmdinfo[REQARGS])
        else:
            pad = 0
        optcount = len(sys.argv[(2 + pad):])
        if optcount > len(cmdinfo[OPTARGS]):
            # make a best attempt at stripping out hidden args
            if cmdinfo.has_key(HIDDENARGS):
                if optcount - len(cmdinfo[HIDDENARGS]) > len(cmdinfo[OPTARGS]):
                    print_subcommand_args_help(subcommand, 2)
                    sys.exit(1)

    return subcommand, sys.argv[2:]

def main():
    """Provides a python bootstrap cli tool"""
    subcommand, reqargs = cliparse()
    noun, verb = subcommand.split('.')
    # Wrap instantiation of bootstrap
    try:
        bootstrap = BootStrap()
        bootstrap_func = getattr(bootstrap, '%s_%s' % (noun, verb))
        res = bootstrap_func(*reqargs)
        if isinstance(res, str):
            print res
        elif isinstance(res, list):
            for line in res:
                print line
    except BootStrapException, error:
        if isinstance(error.messages, list):
            for message in error.messages:
                sys.stderr.write('%s: %s' % (error.tag, message))
        elif isinstance(error.messages, str):
            sys.stderr.write('%s: %s' % (error.tag, error.messages))
        sys.exit(1)

if __name__ == '__main__':
    main()

